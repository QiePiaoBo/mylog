server:
  port: 8888

eureka:
  instance:
    # 使用 ip 代替实例名
    prefer-ip-address: true
    # 实例的主机名
    hostname: ${spring.cloud.client.ip-address}
    # 实例的 ID 规则
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}
  client:
    serviceUrl:
      # 注册中心地址
      defaultZone: http://${eureka.instance.hostname}:8089/eureka/

logging:
  level:
    # log 级别
    org.springframework.cloud.gateway: debug

spring:
  profiles:
#    active: route_requestRateLimiter
#    active: route_hystrix # 熔断
#    active: route_addRequestParameter # 转发指定服务并传入参数
#    active: route_uri # 转发指定地址并传入参数
#    active: route_stripPrefix # 截取请求
#    active: route_simple # 简单尝试
    active: route_all # 综合

---
spring:
  # 简单尝试
  profiles: route_simple
  application:
    name: my-gateway
  cloud:
    gateway:
      discovery:
        locator:
          # 是否和服务注册与发现组件结合，设置为 true 后可以直接使用应用名称调用服务
          enabled: true
      # 路由（routes：路由，它由唯一标识（ID）、目标服务地址（uri）、一组断言（predicates）和一组过滤器组成（filters）。filters 不是必需参数。）
      routes:
        # 路由标识（id：标识，具有唯一性）   简单尝试
        - id: route_simple
          # 目标服务地址（uri：地址，请求转发后的地址）
          uri: http://localhost:8088
          # 路由条件（predicates：断言，匹配 HTTP 请求内容）
          predicates:
            ## 转发地址格式为 uri/archive
            - Path=/hello

---
spring:
  ## 截取请求
  profiles: route_stripPrefix
  application:
    name: my-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
        - id: route_stripPrefix
          uri: http://localhost:8088
          predicates:
            - Path=/strip/hello
          filters:
            ## 截取路径位数
            - StripPrefix=1

---
spring:
  profiles: route_uri
  application:
    name: my-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
        - id: route_uri
          uri: http://localhost:8088
          predicates:
            - Path=/strip/hello
            - Method=GET
          filters:
            ## 截取路径位数
            - StripPrefix=1
            ## 添加指定参数
            - AddRequestParameter=name, dylan


---
spring:
  profiles: route_addRequestParameter
  application:
    name: my-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
        - id: route_addRequestParameter
          ## lb://my-ribbon -> 将请求转发到名为my-ribbon的服务上
          uri: lb://my-ribbon
          predicates:
            - Path=/strip/hello
            - Method=GET
          filters:
            - StripPrefix=1
            - AddRequestParameter=name, dylan


---
spring:
  # 熔断
  profiles: route_hystrix
  application:
    name: my-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
        - id: route_hystrix
          uri: lb://my-ribbon
          predicates:
            - Path=/hystrix/age
            - Method=GET
          filters:
            - StripPrefix=1
            - AddRequestParameter=age, three
            - name: Hystrix
              args:
                name: fallbackcmd
                ### fallback时调用的方法 http://localhost:8888/fallback
                fallbackUri: forward:/fallback



---
spring:
  # 限流
  profiles: route_requestRateLimiter
  redis:
    host: localhost
    port: 6379
    database: 0
    password: 1997o4
  application:
    name: my-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
        # 限流
        - id: route_requestRateLimiter
          uri: lb://my-ribbon
          predicates:
            - Path=/rrl/age
            - Method=GET
          filters:
            - StripPrefix=1
            - AddRequestParameter=age, three
            - name: RequestRateLimiter
              args:
                ## 限流过滤器的Bean名称
                key-resolver: '#{@uriKeyResolver}'
                ## 每秒多少请求
                redis-rate-limiter.replenishRate: 1
                ## 一秒内完成的最大请求数
                redis-rate-limiter.burstCapacity: 3


---
spring:
  # 综合
  profiles: route_all
  redis:
    host: localhost
    port: 6379
    database: 0
    password: 1997o4
  application:
    name: my-gateway
  cloud:
    gateway:
      discovery:
        locator:
          # 是否和服务注册与发现组件结合，设置为true后可以直接使用应用名称调用服务
          enabled: true
      routes:
        # 路由标识(id:标识，具有唯一性) 综合
        - id: route_all
          # 目标服务地址(uri:地址，请求转发后的地址)
          uri: lb://my-ribbon
          # 路由条件(predicates:断言。匹配HTTP请求内容)
          predicates:
            ## 转发地址格式为 uri/routeAll, /all 部分会被下面的过滤器给截取掉
            - Path=/all/routeAll
            ## 匹配get请求
            - Method=GET
          filters:
            ## 截取路径位数
            - StripPrefix=1
            ## 添加指定参数
            - AddRequestParameter=pass, yes
            ## 熔断
            - name: Hystrix
              args:
                name: fallbackcmd
                ### fallback时调用的方法 http://localhost:8000/fallback
                fallbackUri: forward:/fallback
            ## 限流
            - name: RequestRateLimiter
              args:
                ### 限流器过滤的Bean名称
                key-resolver: '#{@uriKeyResolver}'
                ### 希望允许用户每秒处理多少请求
                redis-rate-limiter.replenishRate: 1
                ### 用户允许在一秒内完成的最大请求数
                redis-rate-limiter.burstCapacity: 3

# 保存密码a2b0a7e6-272c-4e3c-a676-674896537ed2